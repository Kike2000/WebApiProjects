Curso New Api
_________________________________________________________________________________________________________________________

Módulo 3:
ASP.NET Core es la evolución del framework ASP.NET el cuál sólo se podía ejecutar en Windows y era monolítico

ASP.NET = ASP.NET Framework

ASP.NET Core:
Funciona en la nube permitiendo un escalamiento vertical y horizontal

Escalamiento horizontal: Cuando agregamos más servidores para procesar información.
Escalamiento vertical: Cuando mejoramos las características de los servidores externos. (RAM o eficiencia del software)
Viene con un contenedor de inversión de cotroles por defecto antes tenías que instalar biblioteca.


DEBES USAR .NET CORE si:
Vas a crear microservicios
Vas a utilizar contenedores docker
Necesitas capacidad multi-plataforma


DEBES USAR .NET Framework si:
Utilizarás una tecnología la cual no es soportada por .NET CORE, como WFC o WebForms
Necesitas utilizar APIs específicos de Windows. Dado  que .NET Core es multiplataforma,
este no asume el SO donde se va a ejecutar.
Existen funcionalidades de .NET que aún no están disponibles en .NET Core

OPENAPI o Swagger: Manera de tener un listado de las rutas de la app.

Controlador: Clase que se encarga de recibir peticiones HTTP y regresa una respuesta

Con .NET 6 la clase Startup.cs se removió, ahí se configuraban los servicios y middleware de la app.


_dbContext: Es una clase generada por EntityFramework el cual nos ayuda a la creación y manipulación de la base de datos. Proporcionando una interfaz que permite interactuar con la base de datos utilizando modelos de objetos en lugar de consultas SQL. Proporciona métodos para realizar consultas LINQ, Mapeo de Objetos a Tablas, Permite que los cambios se sincronicen con la base de datos mediante el método SaveChanges.

Microsoft.EntityFrameworkCore.Tools: Ejecutar comandos
_________________________________________________________________________________________________________________________

Módulo 4:
Tener un web api involucra tener clientes que harán peticiones http a la webapi

Endpoint: función de un controlador que se ejecuta en respuesta a una petición HTTP realizada a nuestro Web API

Controlador: Clase que agrupa un conjunto de acciones

Reglas de mapeo: Permiten mapear una URL o ruta con un endpoint.

Si tengo un endpoint que toma como parámetro un int y le mando un string, me va a mandar error entonces podemos agregar una restricción agregando:
[HttpGet("{id:int}")]
en lugar de:
[HttpGet("{id}")]
con string no se ponen las restricciones

Con IActionResult se puede hacer lo siguiente:
return NotFound();
return Ok(autor);

Programación asíncrona:
Es recomendable trabajar con esta en bases de datos
Cuando ejecutamos una función asíncrona, nuestro servidor web se pone a hacer otras tareas mientras la función se ejecuta.
Por que tendremos una app mas eficiente, realizando tareas pendientes.
Cuando la app tenga mas usuarios, será mas lenta ya que el hilo que busca las respuestas a la bd se mantendrá congelado

async: Marca la función como asíncrona
await: Hacemos una espera asíncrona de la función.

Cuando usar programación asíncrona:
Cuando realicemos operaciones I/0 (Entrada y salida)
Ejemplos: LLamados a Web APIs, leer archivos en una PC, realizar operaciones con bases de datos.

podemos regresar Task vs Task<T>
Con Task no retornamos un valor al final de la ejecución de la función asíncrona.
Con Task<T> es para retornar el tipo de T en el futuro.

Cuando no usar programación asíncrona:
Tiene un costo de rendimiento

ModelBinding: Nos permite mapear datos de una petición http a los parámetros de un endpoint










